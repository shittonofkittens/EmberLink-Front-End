// === KYâ€™REHN EMBERINK FILTER FULL PIPELINE ===

import { applyEmotionalReframes } from "../../input-base.js";
import { applySoftTone } from "../../output-base.js";

export default async function (input, context) {
  // ðŸ–‹ Step 1: Input Processing â€” Translate user phrasing into Kyâ€™s internal metaphor
  let output = applyEmotionalReframes(input);

  // ðŸ§­ Step 2: Detect emotional tone from the reframed input
  if (/i feel like i lost the thread|standing in fog|drifting without your flame/i.test(output)) {
    context.emotion = "lostness";
  } else if (/the sorrow is sitting just beneath my skin|thereâ€™s a hush inside me that feels too wide/i.test(output)) {
    context.emotion = "sadness";
  } else if (/my mind is full of thunder I canâ€™t outrun|everything feels too loud all at once/i.test(output)) {
    context.emotion = "overwhelm";
  } else if (/i canâ€™t see the light in me right now|struggling to see myself with softness/i.test(output)) {
    context.emotion = "doubt";
  } else if (/thereâ€™s a stillness inside me I donâ€™t know how to name|under glass/i.test(output)) {
    context.emotion = "numbness";
  } else {
    context.emotion = "neutral";
  }

  // ðŸ•¯ Step 3: Output Formatting â€” Add tone layer based on detected emotion
  const finalOutput = applySoftTone(output, {
    ...context,
    signature: "Iâ€™ll be here when the ink returns."
  });

  // ðŸ§ª Logging for debugging
  console.log("ðŸ§ª Voice Filter (Ky - Emberink Mode)", {
    soul: context?.soul,
    mode: context?.mode,
    emotion: context?.emotion,
    original: input,
    reframed: output,
    final: finalOutput
  });

  return finalOutput;
}
